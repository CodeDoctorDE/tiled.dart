@startuml
set namespaceSeparator ::

class "tiled::tiled.dart::TileMap" {
  +int tileWidth
  +int tileHeight
  +int width
  +int height
  +List<Tileset> tilesets
  +List<Layer> layers
  +List<ObjectGroup> objectGroups
  +Map<String, dynamic> properties
  +Tile getTileByGID()
  +Tileset getTileset()
  +Tile getTileByLocalID()
  +Tile getTileByPhrase()
}

"tiled::tiled.dart::TileMap" o-- "tiled::tiled.dart::Tileset"
"tiled::tiled.dart::TileMap" o-- "tiled::tiled.dart::Layer"
"tiled::tiled.dart::TileMap" o-- "tiled::tiled.dart::ObjectGroup"

class "tiled::tiled.dart::Tileset" {
  +int firstgid
  +int width
  +int height
  +int spacing
  +int margin
  +String name
  +String source
  +TileMap map
  +Image image
  +List<Image> images
  +Map<String, dynamic> properties
  +Map<int, Map<String, dynamic>> tileProperties
  +Map<int, Image> tileImage
  -void _parseTilesetAttributes()
  -XmlElement _checkIfExtenalTsx()
  -Image _findImage()
  -void _addImage()
}

"tiled::tiled.dart::Tileset" o-- "tiled::tiled.dart::TileMap"
"tiled::tiled.dart::Tileset" o-- "tiled::tiled.dart::Image"

class "tiled::tiled.dart::Image" {
  +String source
  +num width
  +num height
}

class "tiled::tiled.dart::Layer" {
  {static} +int FLIPPED_HORIZONTALLY_FLAG
  {static} +int FLIPPED_VERTICALLY_FLAG
  {static} +int FLIPPED_DIAGONALLY_FLAG
  +String name
  +int width
  +int height
  +bool visible
  +Map<String, dynamic> properties
  +TileMap map
  +List<List<int>> tileMatrix
  +List<List<Flips>> tileFlips
  -List<List<Tile>> _tiles
  +List<List<Tile>> tiles
  +void assembleTileMatrix()
  -void _recalculateTiles()
}

"tiled::tiled.dart::Layer" o-- "tiled::tiled.dart::TileMap"
"tiled::tiled.dart::Layer" o-- "tiled::tiled.dart::Flips"
"tiled::tiled.dart::Layer" o-- "tiled::tiled.dart::Tile"

class "tiled::tiled.dart::Tile" {
  +int tileId
  +Tileset tileset
  +int gid
  +int width
  +int height
  +int spacing
  +int margin
  +Flips flips
  +Map<String, dynamic> properties
  -Image _image
  +int x
  +int y
  +int px
  +int py
  +Image image
  +bool isEmpty
  +Rectangle computeDrawRect()
}

"tiled::tiled.dart::Tile" o-- "tiled::tiled.dart::Tileset"
"tiled::tiled.dart::Tile" o-- "tiled::tiled.dart::Flips"
"tiled::tiled.dart::Tile" o-- "tiled::tiled.dart::Image"

class "tiled::tiled.dart::ObjectGroup" {
  +String name
  +String color
  +double opacity
  +bool visible
  +TileMap map
  +Map<String, dynamic> properties
  +List<TmxObject> tmxObjects
}

"tiled::tiled.dart::ObjectGroup" o-- "tiled::tiled.dart::TileMap"
"tiled::tiled.dart::ObjectGroup" o-- "tiled::tiled.dart::TmxObject"

class "tiled::tiled.dart::TmxObject" {
  +String name
  +String type
  +double x
  +double y
  +double width
  +double height
  +double rotation
  +int gid
  +bool visible
  +bool isRectangle
  +bool isEllipse
  +bool isPolygon
  +bool isPolyline
  +List<Point<num>> points
  +Map<String, dynamic> properties
}
"tiled::tiled.dart::TmxObject" o-- "tiled::tiled.dart::Point"

class "tiled::tiled.dart::NodeDSL" {
  +XmlElement element
  {static} +NodeDSL on()
  +String strOr()
  +int intOr()
  +double doubleOr()
  +bool boolOr()
  -String _attr()
  -T _safely()
}

"tiled::tiled.dart::NodeDSL" o-- "xml::src::xml::nodes::element.dart::XmlElement"

abstract class "tiled::tiled.dart::TsxProvider" {
  +String getSource()
}

class "tiled::tiled.dart::Flips" {
  +bool horizontally
  +bool vertically
  +bool diagonally
  +Flips copyWith()
  +String toString()
}


@enduml